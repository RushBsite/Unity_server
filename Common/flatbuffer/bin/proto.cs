// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum fbsId : byte
{
  NONE = 0,
  S_EnterGame = 1,
  S_LeaveGame = 2,
  S_Spawn = 3,
  C_Move = 4,
  S_Move = 5,
};

public class fbsIdUnion {
  public fbsId Type { get; set; }
  public object Value { get; set; }

  public fbsIdUnion() {
    this.Type = fbsId.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public Protocol.S_EnterGameT AsS_EnterGame() { return this.As<Protocol.S_EnterGameT>(); }
  public Protocol.S_LeaveGameT AsS_LeaveGame() { return this.As<Protocol.S_LeaveGameT>(); }
  public Protocol.S_SpawnT AsS_Spawn() { return this.As<Protocol.S_SpawnT>(); }
  public Protocol.C_MoveT AsC_Move() { return this.As<Protocol.C_MoveT>(); }
  public Protocol.S_MoveT AsS_Move() { return this.As<Protocol.S_MoveT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, fbsIdUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case fbsId.S_EnterGame: return Protocol.S_EnterGame.Pack(builder, _o.AsS_EnterGame()).Value;
      case fbsId.S_LeaveGame: return Protocol.S_LeaveGame.Pack(builder, _o.AsS_LeaveGame()).Value;
      case fbsId.S_Spawn: return Protocol.S_Spawn.Pack(builder, _o.AsS_Spawn()).Value;
      case fbsId.C_Move: return Protocol.C_Move.Pack(builder, _o.AsC_Move()).Value;
      case fbsId.S_Move: return Protocol.S_Move.Pack(builder, _o.AsS_Move()).Value;
    }
  }
}

public struct Vec3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Protocol.Vec3> CreateVec3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Protocol.Vec3>(builder.Offset);
  }
  public Vec3T UnPack() {
    var _o = new Vec3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<Protocol.Vec3> Pack(FlatBufferBuilder builder, Vec3T _o) {
    if (_o == null) return default(Offset<Protocol.Vec3>);
    return CreateVec3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vec3T
{
  public float X { get; set; }
  public float Y { get; set; }
  public float Z { get; set; }

  public Vec3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct PlayerInfo : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public PlayerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerId { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public byte Name(int j) { return __p.bb.Get(__p.bb_pos + 4 + j * 1); }
  public Protocol.Vec3 Pos { get { return (new Protocol.Vec3()).__assign(__p.bb_pos + 36, __p.bb); } }

  public static Offset<Protocol.PlayerInfo> CreatePlayerInfo(FlatBufferBuilder builder, int PlayerId, byte[] Name, float pos_X, float pos_Y, float pos_Z) {
    builder.Prep(4, 48);
    builder.Prep(4, 12);
    builder.PutFloat(pos_Z);
    builder.PutFloat(pos_Y);
    builder.PutFloat(pos_X);
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(Name[_idx0-1]);
    }
    builder.PutInt(PlayerId);
    return new Offset<Protocol.PlayerInfo>(builder.Offset);
  }
  public PlayerInfoT UnPack() {
    var _o = new PlayerInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlayerInfoT _o) {
    _o.PlayerId = this.PlayerId;
    _o.Name = new byte[32];
    for (var _j = 0; _j < 32; ++_j) { _o.Name[_j] = this.Name(_j); }
    _o.Pos = this.Pos.UnPack();
  }
  public static Offset<Protocol.PlayerInfo> Pack(FlatBufferBuilder builder, PlayerInfoT _o) {
    if (_o == null) return default(Offset<Protocol.PlayerInfo>);
    var _name = _o.Name;
    var _pos_x = _o.Pos.X;
    var _pos_y = _o.Pos.Y;
    var _pos_z = _o.Pos.Z;
    return CreatePlayerInfo(
      builder,
      _o.PlayerId,
      _name,
      _pos_x,
      _pos_y,
      _pos_z);
  }
};

public class PlayerInfoT
{
  public int PlayerId { get; set; }
  public byte[] Name { get; set; }
  public Protocol.Vec3T Pos { get; set; }

  public PlayerInfoT() {
    this.PlayerId = 0;
    this.Name = new byte[32];
    this.Pos = new Protocol.Vec3T();
  }
}

public struct S_EnterGame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_EnterGame GetRootAsS_EnterGame(ByteBuffer _bb) { return GetRootAsS_EnterGame(_bb, new S_EnterGame()); }
  public static S_EnterGame GetRootAsS_EnterGame(ByteBuffer _bb, S_EnterGame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_EnterGame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Protocol.PlayerInfo? Player { get { int o = __p.__offset(4); return o != 0 ? (Protocol.PlayerInfo?)(new Protocol.PlayerInfo()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartS_EnterGame(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayer(FlatBufferBuilder builder, Offset<Protocol.PlayerInfo> playerOffset) { builder.AddStruct(0, playerOffset.Value, 0); }
  public static Offset<Protocol.S_EnterGame> EndS_EnterGame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_EnterGame>(o);
  }
  public S_EnterGameT UnPack() {
    var _o = new S_EnterGameT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_EnterGameT _o) {
    _o.Player = this.Player.HasValue ? this.Player.Value.UnPack() : null;
  }
  public static Offset<Protocol.S_EnterGame> Pack(FlatBufferBuilder builder, S_EnterGameT _o) {
    if (_o == null) return default(Offset<Protocol.S_EnterGame>);
    StartS_EnterGame(builder);
    AddPlayer(builder, Protocol.PlayerInfo.Pack(builder, _o.Player));
    return EndS_EnterGame(builder);
  }
};

public class S_EnterGameT
{
  public Protocol.PlayerInfoT Player { get; set; }

  public S_EnterGameT() {
    this.Player = new Protocol.PlayerInfoT();
  }
}

public struct S_LeaveGame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_LeaveGame GetRootAsS_LeaveGame(ByteBuffer _bb) { return GetRootAsS_LeaveGame(_bb, new S_LeaveGame()); }
  public static S_LeaveGame GetRootAsS_LeaveGame(ByteBuffer _bb, S_LeaveGame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_LeaveGame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartS_LeaveGame(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<Protocol.S_LeaveGame> EndS_LeaveGame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_LeaveGame>(o);
  }
  public S_LeaveGameT UnPack() {
    var _o = new S_LeaveGameT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_LeaveGameT _o) {
  }
  public static Offset<Protocol.S_LeaveGame> Pack(FlatBufferBuilder builder, S_LeaveGameT _o) {
    if (_o == null) return default(Offset<Protocol.S_LeaveGame>);
    StartS_LeaveGame(builder);
    return EndS_LeaveGame(builder);
  }
};

public class S_LeaveGameT
{

  public S_LeaveGameT() {
  }
}

public struct S_Spawn : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_Spawn GetRootAsS_Spawn(ByteBuffer _bb) { return GetRootAsS_Spawn(_bb, new S_Spawn()); }
  public static S_Spawn GetRootAsS_Spawn(ByteBuffer _bb, S_Spawn obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_Spawn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Protocol.PlayerInfo? Players(int j) { int o = __p.__offset(4); return o != 0 ? (Protocol.PlayerInfo?)(new Protocol.PlayerInfo()).__assign(__p.__vector(o) + j * 48, __p.bb) : null; }
  public int PlayersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Protocol.S_Spawn> CreateS_Spawn(FlatBufferBuilder builder,
      VectorOffset playersOffset = default(VectorOffset)) {
    builder.StartTable(1);
    S_Spawn.AddPlayers(builder, playersOffset);
    return S_Spawn.EndS_Spawn(builder);
  }

  public static void StartS_Spawn(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayers(FlatBufferBuilder builder, VectorOffset playersOffset) { builder.AddOffset(0, playersOffset.Value, 0); }
  public static void StartPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(48, numElems, 4); }
  public static Offset<Protocol.S_Spawn> EndS_Spawn(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_Spawn>(o);
  }
  public S_SpawnT UnPack() {
    var _o = new S_SpawnT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_SpawnT _o) {
    _o.Players = new List<Protocol.PlayerInfoT>();
    for (var _j = 0; _j < this.PlayersLength; ++_j) {_o.Players.Add(this.Players(_j).HasValue ? this.Players(_j).Value.UnPack() : null);}
  }
  public static Offset<Protocol.S_Spawn> Pack(FlatBufferBuilder builder, S_SpawnT _o) {
    if (_o == null) return default(Offset<Protocol.S_Spawn>);
    var _players = default(VectorOffset);
    if (_o.Players != null) {
      StartPlayersVector(builder, _o.Players.Count);
      for (var _j = _o.Players.Count - 1; _j >= 0; --_j) { Protocol.PlayerInfo.Pack(builder, _o.Players[_j]); }
      _players = builder.EndVector();
    }
    return CreateS_Spawn(
      builder,
      _players);
  }
};

public class S_SpawnT
{
  public List<Protocol.PlayerInfoT> Players { get; set; }

  public S_SpawnT() {
    this.Players = null;
  }
}

public struct C_Move : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static C_Move GetRootAsC_Move(ByteBuffer _bb) { return GetRootAsC_Move(_bb, new C_Move()); }
  public static C_Move GetRootAsC_Move(ByteBuffer _bb, C_Move obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public C_Move __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Protocol.Vec3? Pos { get { int o = __p.__offset(4); return o != 0 ? (Protocol.Vec3?)(new Protocol.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartC_Move(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Protocol.Vec3> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static Offset<Protocol.C_Move> EndC_Move(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.C_Move>(o);
  }
  public C_MoveT UnPack() {
    var _o = new C_MoveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(C_MoveT _o) {
    _o.Pos = this.Pos.HasValue ? this.Pos.Value.UnPack() : null;
  }
  public static Offset<Protocol.C_Move> Pack(FlatBufferBuilder builder, C_MoveT _o) {
    if (_o == null) return default(Offset<Protocol.C_Move>);
    StartC_Move(builder);
    AddPos(builder, Protocol.Vec3.Pack(builder, _o.Pos));
    return EndC_Move(builder);
  }
};

public class C_MoveT
{
  public Protocol.Vec3T Pos { get; set; }

  public C_MoveT() {
    this.Pos = new Protocol.Vec3T();
  }
}

public struct S_Move : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_Move GetRootAsS_Move(ByteBuffer _bb) { return GetRootAsS_Move(_bb, new S_Move()); }
  public static S_Move GetRootAsS_Move(ByteBuffer _bb, S_Move obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_Move __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Protocol.Vec3? Pos { get { int o = __p.__offset(6); return o != 0 ? (Protocol.Vec3?)(new Protocol.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<Protocol.S_Move> CreateS_Move(FlatBufferBuilder builder,
      int player_id = 0,
      Protocol.Vec3T pos = null) {
    builder.StartTable(2);
    S_Move.AddPos(builder, Protocol.Vec3.Pack(builder, pos));
    S_Move.AddPlayerId(builder, player_id);
    return S_Move.EndS_Move(builder);
  }

  public static void StartS_Move(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, int playerId) { builder.AddInt(0, playerId, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Protocol.Vec3> posOffset) { builder.AddStruct(1, posOffset.Value, 0); }
  public static Offset<Protocol.S_Move> EndS_Move(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_Move>(o);
  }
  public S_MoveT UnPack() {
    var _o = new S_MoveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_MoveT _o) {
    _o.PlayerId = this.PlayerId;
    _o.Pos = this.Pos.HasValue ? this.Pos.Value.UnPack() : null;
  }
  public static Offset<Protocol.S_Move> Pack(FlatBufferBuilder builder, S_MoveT _o) {
    if (_o == null) return default(Offset<Protocol.S_Move>);
    return CreateS_Move(
      builder,
      _o.PlayerId,
      _o.Pos);
  }
};

public class S_MoveT
{
  public int PlayerId { get; set; }
  public Protocol.Vec3T Pos { get; set; }

  public S_MoveT() {
    this.PlayerId = 0;
    this.Pos = new Protocol.Vec3T();
  }
}


}
