// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum fbsId : byte
{
  NONE = 0,
  S_EnterGame = 1,
  S_LeaveGame = 2,
  S_Spawn = 3,
  S_Despawn = 4,
  C_Move = 5,
  S_Move = 6,
};

public class fbsIdUnion {
  public fbsId Type { get; set; }
  public object Value { get; set; }

  public fbsIdUnion() {
    this.Type = fbsId.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public Protocol.S_EnterGameT AsS_EnterGame() { return this.As<Protocol.S_EnterGameT>(); }
  public Protocol.S_LeaveGameT AsS_LeaveGame() { return this.As<Protocol.S_LeaveGameT>(); }
  public Protocol.S_SpawnT AsS_Spawn() { return this.As<Protocol.S_SpawnT>(); }
  public Protocol.S_DespawnT AsS_Despawn() { return this.As<Protocol.S_DespawnT>(); }
  public Protocol.C_MoveT AsC_Move() { return this.As<Protocol.C_MoveT>(); }
  public Protocol.S_MoveT AsS_Move() { return this.As<Protocol.S_MoveT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, fbsIdUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case fbsId.S_EnterGame: return Protocol.S_EnterGame.Pack(builder, _o.AsS_EnterGame()).Value;
      case fbsId.S_LeaveGame: return Protocol.S_LeaveGame.Pack(builder, _o.AsS_LeaveGame()).Value;
      case fbsId.S_Spawn: return Protocol.S_Spawn.Pack(builder, _o.AsS_Spawn()).Value;
      case fbsId.S_Despawn: return Protocol.S_Despawn.Pack(builder, _o.AsS_Despawn()).Value;
      case fbsId.C_Move: return Protocol.C_Move.Pack(builder, _o.AsC_Move()).Value;
      case fbsId.S_Move: return Protocol.S_Move.Pack(builder, _o.AsS_Move()).Value;
    }
  }
}

public enum UserState : ushort
{
  Idle = 0,
  Moving = 1,
  Jumping = 2,
  Dead = 3,
};

public enum MoveDir : ushort
{
  N = 0,
  NNE = 1,
  ENE = 2,
  E = 3,
  ESE = 4,
  SSE = 5,
  S = 6,
  SSW = 7,
  WSW = 8,
  W = 9,
  WNW = 10,
  NNW = 11,
};

public struct Vec3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Protocol.Vec3> CreateVec3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Protocol.Vec3>(builder.Offset);
  }
  public Vec3T UnPack() {
    var _o = new Vec3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<Protocol.Vec3> Pack(FlatBufferBuilder builder, Vec3T _o) {
    if (_o == null) return default(Offset<Protocol.Vec3>);
    return CreateVec3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vec3T
{
  public float X { get; set; }
  public float Y { get; set; }
  public float Z { get; set; }

  public Vec3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct Euler : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Euler __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Rx { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Ry { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Rz { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }

  public static Offset<Protocol.Euler> CreateEuler(FlatBufferBuilder builder, double Rx, double Ry, double Rz) {
    builder.Prep(8, 24);
    builder.PutDouble(Rz);
    builder.PutDouble(Ry);
    builder.PutDouble(Rx);
    return new Offset<Protocol.Euler>(builder.Offset);
  }
  public EulerT UnPack() {
    var _o = new EulerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EulerT _o) {
    _o.Rx = this.Rx;
    _o.Ry = this.Ry;
    _o.Rz = this.Rz;
  }
  public static Offset<Protocol.Euler> Pack(FlatBufferBuilder builder, EulerT _o) {
    if (_o == null) return default(Offset<Protocol.Euler>);
    return CreateEuler(
      builder,
      _o.Rx,
      _o.Ry,
      _o.Rz);
  }
};

public class EulerT
{
  public double Rx { get; set; }
  public double Ry { get; set; }
  public double Rz { get; set; }

  public EulerT() {
    this.Rx = 0.0;
    this.Ry = 0.0;
    this.Rz = 0.0;
  }
}

public struct PositionInfo : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public PositionInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Protocol.MoveDir Direction { get { return (Protocol.MoveDir)__p.bb.GetUshort(__p.bb_pos + 0); } }
  public Protocol.UserState State { get { return (Protocol.UserState)__p.bb.GetUshort(__p.bb_pos + 2); } }
  public Protocol.Vec3 Pos { get { return (new Protocol.Vec3()).__assign(__p.bb_pos + 4, __p.bb); } }
  public Protocol.Euler Angle { get { return (new Protocol.Euler()).__assign(__p.bb_pos + 16, __p.bb); } }

  public static Offset<Protocol.PositionInfo> CreatePositionInfo(FlatBufferBuilder builder, Protocol.MoveDir Direction, Protocol.UserState State, float pos_X, float pos_Y, float pos_Z, double angle_Rx, double angle_Ry, double angle_Rz) {
    builder.Prep(8, 40);
    builder.Prep(8, 24);
    builder.PutDouble(angle_Rz);
    builder.PutDouble(angle_Ry);
    builder.PutDouble(angle_Rx);
    builder.Prep(4, 12);
    builder.PutFloat(pos_Z);
    builder.PutFloat(pos_Y);
    builder.PutFloat(pos_X);
    builder.PutUshort((ushort)State);
    builder.PutUshort((ushort)Direction);
    return new Offset<Protocol.PositionInfo>(builder.Offset);
  }
  public PositionInfoT UnPack() {
    var _o = new PositionInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionInfoT _o) {
    _o.Direction = this.Direction;
    _o.State = this.State;
    _o.Pos = this.Pos.UnPack();
    _o.Angle = this.Angle.UnPack();
  }
  public static Offset<Protocol.PositionInfo> Pack(FlatBufferBuilder builder, PositionInfoT _o) {
    if (_o == null) return default(Offset<Protocol.PositionInfo>);
    var _pos_x = _o.Pos.X;
    var _pos_y = _o.Pos.Y;
    var _pos_z = _o.Pos.Z;
    var _angle_rx = _o.Angle.Rx;
    var _angle_ry = _o.Angle.Ry;
    var _angle_rz = _o.Angle.Rz;
    return CreatePositionInfo(
      builder,
      _o.Direction,
      _o.State,
      _pos_x,
      _pos_y,
      _pos_z,
      _angle_rx,
      _angle_ry,
      _angle_rz);
  }
};

public class PositionInfoT
{
  public Protocol.MoveDir Direction { get; set; }
  public Protocol.UserState State { get; set; }
  public Protocol.Vec3T Pos { get; set; }
  public Protocol.EulerT Angle { get; set; }

  public PositionInfoT() {
    this.Direction = Protocol.MoveDir.N;
    this.State = Protocol.UserState.Idle;
    this.Pos = new Protocol.Vec3T();
    this.Angle = new Protocol.EulerT();
  }
}

public struct PlayerInfo : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public PlayerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerId { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public byte Name(int j) { return __p.bb.Get(__p.bb_pos + 4 + j * 1); }
  public Protocol.PositionInfo PosInfo { get { return (new Protocol.PositionInfo()).__assign(__p.bb_pos + 40, __p.bb); } }

  public static Offset<Protocol.PlayerInfo> CreatePlayerInfo(FlatBufferBuilder builder, int PlayerId, byte[] Name, Protocol.MoveDir pos_info_Direction, Protocol.UserState pos_info_State, float pos_info_pos_X, float pos_info_pos_Y, float pos_info_pos_Z, double pos_info_angle_Rx, double pos_info_angle_Ry, double pos_info_angle_Rz) {
    builder.Prep(8, 80);
    builder.Prep(8, 40);
    builder.Prep(8, 24);
    builder.PutDouble(pos_info_angle_Rz);
    builder.PutDouble(pos_info_angle_Ry);
    builder.PutDouble(pos_info_angle_Rx);
    builder.Prep(4, 12);
    builder.PutFloat(pos_info_pos_Z);
    builder.PutFloat(pos_info_pos_Y);
    builder.PutFloat(pos_info_pos_X);
    builder.PutUshort((ushort)pos_info_State);
    builder.PutUshort((ushort)pos_info_Direction);
    builder.Pad(4);
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(Name[_idx0-1]);
    }
    builder.PutInt(PlayerId);
    return new Offset<Protocol.PlayerInfo>(builder.Offset);
  }
  public PlayerInfoT UnPack() {
    var _o = new PlayerInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlayerInfoT _o) {
    _o.PlayerId = this.PlayerId;
    _o.Name = new byte[32];
    for (var _j = 0; _j < 32; ++_j) { _o.Name[_j] = this.Name(_j); }
    _o.PosInfo = this.PosInfo.UnPack();
  }
  public static Offset<Protocol.PlayerInfo> Pack(FlatBufferBuilder builder, PlayerInfoT _o) {
    if (_o == null) return default(Offset<Protocol.PlayerInfo>);
    var _name = _o.Name;
    var _pos_info_direction = _o.PosInfo.Direction;
    var _pos_info_state = _o.PosInfo.State;
    var _pos_info_pos_x = _o.PosInfo.Pos.X;
    var _pos_info_pos_y = _o.PosInfo.Pos.Y;
    var _pos_info_pos_z = _o.PosInfo.Pos.Z;
    var _pos_info_angle_rx = _o.PosInfo.Angle.Rx;
    var _pos_info_angle_ry = _o.PosInfo.Angle.Ry;
    var _pos_info_angle_rz = _o.PosInfo.Angle.Rz;
    return CreatePlayerInfo(
      builder,
      _o.PlayerId,
      _name,
      _pos_info_direction,
      _pos_info_state,
      _pos_info_pos_x,
      _pos_info_pos_y,
      _pos_info_pos_z,
      _pos_info_angle_rx,
      _pos_info_angle_ry,
      _pos_info_angle_rz);
  }
};

public class PlayerInfoT
{
  public int PlayerId { get; set; }
  public byte[] Name { get; set; }
  public Protocol.PositionInfoT PosInfo { get; set; }

  public PlayerInfoT() {
    this.PlayerId = 0;
    this.Name = new byte[32];
    this.PosInfo = new Protocol.PositionInfoT();
  }
}

public struct S_EnterGame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_EnterGame GetRootAsS_EnterGame(ByteBuffer _bb) { return GetRootAsS_EnterGame(_bb, new S_EnterGame()); }
  public static S_EnterGame GetRootAsS_EnterGame(ByteBuffer _bb, S_EnterGame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_EnterGame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Protocol.PlayerInfo? Player { get { int o = __p.__offset(4); return o != 0 ? (Protocol.PlayerInfo?)(new Protocol.PlayerInfo()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartS_EnterGame(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayer(FlatBufferBuilder builder, Offset<Protocol.PlayerInfo> playerOffset) { builder.AddStruct(0, playerOffset.Value, 0); }
  public static Offset<Protocol.S_EnterGame> EndS_EnterGame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_EnterGame>(o);
  }
  public S_EnterGameT UnPack() {
    var _o = new S_EnterGameT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_EnterGameT _o) {
    _o.Player = this.Player.HasValue ? this.Player.Value.UnPack() : null;
  }
  public static Offset<Protocol.S_EnterGame> Pack(FlatBufferBuilder builder, S_EnterGameT _o) {
    if (_o == null) return default(Offset<Protocol.S_EnterGame>);
    StartS_EnterGame(builder);
    AddPlayer(builder, Protocol.PlayerInfo.Pack(builder, _o.Player));
    return EndS_EnterGame(builder);
  }
};

public class S_EnterGameT
{
  public Protocol.PlayerInfoT Player { get; set; }

  public S_EnterGameT() {
    this.Player = new Protocol.PlayerInfoT();
  }
}

public struct S_LeaveGame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_LeaveGame GetRootAsS_LeaveGame(ByteBuffer _bb) { return GetRootAsS_LeaveGame(_bb, new S_LeaveGame()); }
  public static S_LeaveGame GetRootAsS_LeaveGame(ByteBuffer _bb, S_LeaveGame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_LeaveGame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartS_LeaveGame(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<Protocol.S_LeaveGame> EndS_LeaveGame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_LeaveGame>(o);
  }
  public S_LeaveGameT UnPack() {
    var _o = new S_LeaveGameT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_LeaveGameT _o) {
  }
  public static Offset<Protocol.S_LeaveGame> Pack(FlatBufferBuilder builder, S_LeaveGameT _o) {
    if (_o == null) return default(Offset<Protocol.S_LeaveGame>);
    StartS_LeaveGame(builder);
    return EndS_LeaveGame(builder);
  }
};

public class S_LeaveGameT
{

  public S_LeaveGameT() {
  }
}

public struct S_Spawn : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_Spawn GetRootAsS_Spawn(ByteBuffer _bb) { return GetRootAsS_Spawn(_bb, new S_Spawn()); }
  public static S_Spawn GetRootAsS_Spawn(ByteBuffer _bb, S_Spawn obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_Spawn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Protocol.PlayerInfo? Players(int j) { int o = __p.__offset(4); return o != 0 ? (Protocol.PlayerInfo?)(new Protocol.PlayerInfo()).__assign(__p.__vector(o) + j * 80, __p.bb) : null; }
  public int PlayersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Protocol.S_Spawn> CreateS_Spawn(FlatBufferBuilder builder,
      VectorOffset playersOffset = default(VectorOffset)) {
    builder.StartTable(1);
    S_Spawn.AddPlayers(builder, playersOffset);
    return S_Spawn.EndS_Spawn(builder);
  }

  public static void StartS_Spawn(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayers(FlatBufferBuilder builder, VectorOffset playersOffset) { builder.AddOffset(0, playersOffset.Value, 0); }
  public static void StartPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(80, numElems, 8); }
  public static Offset<Protocol.S_Spawn> EndS_Spawn(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_Spawn>(o);
  }
  public S_SpawnT UnPack() {
    var _o = new S_SpawnT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_SpawnT _o) {
    _o.Players = new List<Protocol.PlayerInfoT>();
    for (var _j = 0; _j < this.PlayersLength; ++_j) {_o.Players.Add(this.Players(_j).HasValue ? this.Players(_j).Value.UnPack() : null);}
  }
  public static Offset<Protocol.S_Spawn> Pack(FlatBufferBuilder builder, S_SpawnT _o) {
    if (_o == null) return default(Offset<Protocol.S_Spawn>);
    var _players = default(VectorOffset);
    if (_o.Players != null) {
      StartPlayersVector(builder, _o.Players.Count);
      for (var _j = _o.Players.Count - 1; _j >= 0; --_j) { Protocol.PlayerInfo.Pack(builder, _o.Players[_j]); }
      _players = builder.EndVector();
    }
    return CreateS_Spawn(
      builder,
      _players);
  }
};

public class S_SpawnT
{
  public List<Protocol.PlayerInfoT> Players { get; set; }

  public S_SpawnT() {
    this.Players = null;
  }
}

public struct S_Despawn : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_Despawn GetRootAsS_Despawn(ByteBuffer _bb) { return GetRootAsS_Despawn(_bb, new S_Despawn()); }
  public static S_Despawn GetRootAsS_Despawn(ByteBuffer _bb, S_Despawn obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_Despawn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PlayerIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPlayerIdsBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetPlayerIdsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetPlayerIdsArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<Protocol.S_Despawn> CreateS_Despawn(FlatBufferBuilder builder,
      VectorOffset player_idsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    S_Despawn.AddPlayerIds(builder, player_idsOffset);
    return S_Despawn.EndS_Despawn(builder);
  }

  public static void StartS_Despawn(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerIds(FlatBufferBuilder builder, VectorOffset playerIdsOffset) { builder.AddOffset(0, playerIdsOffset.Value, 0); }
  public static VectorOffset CreatePlayerIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePlayerIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlayerIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Protocol.S_Despawn> EndS_Despawn(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_Despawn>(o);
  }
  public S_DespawnT UnPack() {
    var _o = new S_DespawnT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_DespawnT _o) {
    _o.PlayerIds = new List<int>();
    for (var _j = 0; _j < this.PlayerIdsLength; ++_j) {_o.PlayerIds.Add(this.PlayerIds(_j));}
  }
  public static Offset<Protocol.S_Despawn> Pack(FlatBufferBuilder builder, S_DespawnT _o) {
    if (_o == null) return default(Offset<Protocol.S_Despawn>);
    var _player_ids = default(VectorOffset);
    if (_o.PlayerIds != null) {
      var __player_ids = _o.PlayerIds.ToArray();
      _player_ids = CreatePlayerIdsVector(builder, __player_ids);
    }
    return CreateS_Despawn(
      builder,
      _player_ids);
  }
};

public class S_DespawnT
{
  public List<int> PlayerIds { get; set; }

  public S_DespawnT() {
    this.PlayerIds = null;
  }
}

public struct C_Move : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static C_Move GetRootAsC_Move(ByteBuffer _bb) { return GetRootAsC_Move(_bb, new C_Move()); }
  public static C_Move GetRootAsC_Move(ByteBuffer _bb, C_Move obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public C_Move __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Protocol.PositionInfo? PosInfo { get { int o = __p.__offset(4); return o != 0 ? (Protocol.PositionInfo?)(new Protocol.PositionInfo()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartC_Move(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPosInfo(FlatBufferBuilder builder, Offset<Protocol.PositionInfo> posInfoOffset) { builder.AddStruct(0, posInfoOffset.Value, 0); }
  public static Offset<Protocol.C_Move> EndC_Move(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.C_Move>(o);
  }
  public C_MoveT UnPack() {
    var _o = new C_MoveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(C_MoveT _o) {
    _o.PosInfo = this.PosInfo.HasValue ? this.PosInfo.Value.UnPack() : null;
  }
  public static Offset<Protocol.C_Move> Pack(FlatBufferBuilder builder, C_MoveT _o) {
    if (_o == null) return default(Offset<Protocol.C_Move>);
    StartC_Move(builder);
    AddPosInfo(builder, Protocol.PositionInfo.Pack(builder, _o.PosInfo));
    return EndC_Move(builder);
  }
};

public class C_MoveT
{
  public Protocol.PositionInfoT PosInfo { get; set; }

  public C_MoveT() {
    this.PosInfo = new Protocol.PositionInfoT();
  }
}

public struct S_Move : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S_Move GetRootAsS_Move(ByteBuffer _bb) { return GetRootAsS_Move(_bb, new S_Move()); }
  public static S_Move GetRootAsS_Move(ByteBuffer _bb, S_Move obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_Move __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Protocol.PositionInfo? PosInfo { get { int o = __p.__offset(6); return o != 0 ? (Protocol.PositionInfo?)(new Protocol.PositionInfo()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<Protocol.S_Move> CreateS_Move(FlatBufferBuilder builder,
      int player_id = 0,
      Protocol.PositionInfoT pos_info = null) {
    builder.StartTable(2);
    S_Move.AddPosInfo(builder, Protocol.PositionInfo.Pack(builder, pos_info));
    S_Move.AddPlayerId(builder, player_id);
    return S_Move.EndS_Move(builder);
  }

  public static void StartS_Move(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, int playerId) { builder.AddInt(0, playerId, 0); }
  public static void AddPosInfo(FlatBufferBuilder builder, Offset<Protocol.PositionInfo> posInfoOffset) { builder.AddStruct(1, posInfoOffset.Value, 0); }
  public static Offset<Protocol.S_Move> EndS_Move(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Protocol.S_Move>(o);
  }
  public S_MoveT UnPack() {
    var _o = new S_MoveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_MoveT _o) {
    _o.PlayerId = this.PlayerId;
    _o.PosInfo = this.PosInfo.HasValue ? this.PosInfo.Value.UnPack() : null;
  }
  public static Offset<Protocol.S_Move> Pack(FlatBufferBuilder builder, S_MoveT _o) {
    if (_o == null) return default(Offset<Protocol.S_Move>);
    return CreateS_Move(
      builder,
      _o.PlayerId,
      _o.PosInfo);
  }
};

public class S_MoveT
{
  public int PlayerId { get; set; }
  public Protocol.PositionInfoT PosInfo { get; set; }

  public S_MoveT() {
    this.PlayerId = 0;
    this.PosInfo = new Protocol.PositionInfoT();
  }
}


}
