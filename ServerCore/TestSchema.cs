// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum Cus : sbyte
{
  A = 1,
  B = 2,
  C = 3,
};

public enum Skill : byte
{
  NONE = 0,
  Fire = 1,
  Ice = 2,
  Thunder = 3,
};

public struct vec2 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public vec2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }

  public static Offset<vec2> Createvec2(FlatBufferBuilder builder, float X, float Y) {
    builder.Prep(4, 8);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<vec2>(builder.Offset);
  }
};

public struct PlayerDefault : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PlayerDefault GetRootAsPlayerDefault(ByteBuffer _bb) { return GetRootAsPlayerDefault(_bb, new PlayerDefault()); }
  public static PlayerDefault GetRootAsPlayerDefault(ByteBuffer _bb, PlayerDefault obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerDefault __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public vec2? Pos { get { int o = __p.__offset(4); return o != 0 ? (vec2?)(new vec2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public Cus Cus { get { int o = __p.__offset(8); return o != 0 ? (Cus)__p.bb.GetSbyte(o + __p.bb_pos) : Cus.A; } }
  public string Geo { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeoBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetGeoBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetGeoArray() { return __p.__vector_as_array<byte>(10); }

  public static void StartPlayerDefault(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPos(FlatBufferBuilder builder, Offset<vec2> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddCus(FlatBufferBuilder builder, Cus cus) { builder.AddSbyte(2, (sbyte)cus, 1); }
  public static void AddGeo(FlatBufferBuilder builder, StringOffset geoOffset) { builder.AddOffset(3, geoOffset.Value, 0); }
  public static Offset<PlayerDefault> EndPlayerDefault(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PlayerDefault>(o);
  }
};

public struct Fire : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Fire GetRootAsFire(ByteBuffer _bb) { return GetRootAsFire(_bb, new Fire()); }
  public static Fire GetRootAsFire(ByteBuffer _bb, Fire obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Fire __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Damage { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10; } }
  public short Distance { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)5; } }

  public static Offset<Fire> CreateFire(FlatBufferBuilder builder,
      int damage = 10,
      short distance = 5) {
    builder.StartTable(2);
    Fire.AddDamage(builder, damage);
    Fire.AddDistance(builder, distance);
    return Fire.EndFire(builder);
  }

  public static void StartFire(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDamage(FlatBufferBuilder builder, int damage) { builder.AddInt(0, damage, 10); }
  public static void AddDistance(FlatBufferBuilder builder, short distance) { builder.AddShort(1, distance, 5); }
  public static Offset<Fire> EndFire(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Fire>(o);
  }
};

public struct Ice : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Ice GetRootAsIce(ByteBuffer _bb) { return GetRootAsIce(_bb, new Ice()); }
  public static Ice GetRootAsIce(ByteBuffer _bb, Ice obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Ice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Damage { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10; } }
  public short Distance { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)5; } }

  public static Offset<Ice> CreateIce(FlatBufferBuilder builder,
      int damage = 10,
      short distance = 5) {
    builder.StartTable(2);
    Ice.AddDamage(builder, damage);
    Ice.AddDistance(builder, distance);
    return Ice.EndIce(builder);
  }

  public static void StartIce(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDamage(FlatBufferBuilder builder, int damage) { builder.AddInt(0, damage, 10); }
  public static void AddDistance(FlatBufferBuilder builder, short distance) { builder.AddShort(1, distance, 5); }
  public static Offset<Ice> EndIce(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ice>(o);
  }
};

public struct Thunder : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Thunder GetRootAsThunder(ByteBuffer _bb) { return GetRootAsThunder(_bb, new Thunder()); }
  public static Thunder GetRootAsThunder(ByteBuffer _bb, Thunder obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Thunder __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Damage { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10; } }
  public short Distance { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)5; } }

  public static Offset<Thunder> CreateThunder(FlatBufferBuilder builder,
      int damage = 10,
      short distance = 5) {
    builder.StartTable(2);
    Thunder.AddDamage(builder, damage);
    Thunder.AddDistance(builder, distance);
    return Thunder.EndThunder(builder);
  }

  public static void StartThunder(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDamage(FlatBufferBuilder builder, int damage) { builder.AddInt(0, damage, 10); }
  public static void AddDistance(FlatBufferBuilder builder, short distance) { builder.AddShort(1, distance, 5); }
  public static Offset<Thunder> EndThunder(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Thunder>(o);
  }
};

